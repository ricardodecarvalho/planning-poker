rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isRoomOwner(roomId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/rooms/$(roomId)).data.createdBy == request.auth.uid;
    }
    
    function isValidRoomData() {
      let data = request.resource.data;
      return data.keys().hasAll(['createdAt', 'createdBy', 'showVotes', 'participants']) &&
        (data.createdAt is string || data.createdAt is timestamp) &&
        data.createdBy is string &&
        data.showVotes is bool &&
        data.participants is list &&
        data.participants.size() > 0;
    }
    
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['displayName', 'email', 'uid', 'createdAt', 'photoURL', 'colorScheme', 'state']) &&
        data.displayName is string &&
        data.email is string &&
        data.uid is string &&
        data.createdAt is string &&
        data.state in ['online', 'offline'];
    }

    // Regras para usuários
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId) && isValidUserData();
      allow update: if isAuthenticated() && isOwner(userId) && isValidUserData();
      allow delete: if false;
    }

    // Regras para salas
    match /rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidRoomData() && isOwner(request.resource.data.createdBy);
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.createdBy) || 
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['showVotes', 'participants']) && isAuthenticated()));
      allow delete: if isAuthenticated() && isOwner(resource.data.createdBy);
      
      // Regras para votos
      match /votes/{voteId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.keys().hasAll(['userId', 'voteValue', 'votedAt', 'roomId']) &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.roomId == roomId;
        allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || isRoomOwner(roomId));
      }
    }

    // Regras para consultas de salas
    match /rooms/{document=**} {
      allow list: if isAuthenticated() && 
        (request.query.limit <= 20) && 
        (request.query.orderBy == "createdAt" || !request.query.orderBy) &&
        (request.query.where == "createdBy" || !request.query.where);
    }

    // Bloquear acesso a qualquer outro documento
    match /{document=**} {
      allow read, write: if false;
    }
  }
}